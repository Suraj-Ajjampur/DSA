!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
%.o	Makefile	/^%.o: %.c $(DEPS)$/;"	t
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS=-I.$/;"	m
DEPS	Makefile	/^DEPS = main.h ll_apps.h$/;"	m
Delete	CPP/main.cpp	/^int LinkedList::Delete(int index)$/;"	f	class:LinkedList	typeref:typename:int
Delete	Circular_LL/main.c	/^int Delete(struct Node *p,int index){$/;"	f	typeref:typename:int
Delete	Doubly-LL/main.c	/^int Delete(struct Node *p, int index){$/;"	f	typeref:typename:int
Delete	main.c	/^int Delete(struct Node *p, int index)$/;"	f	typeref:typename:int
Display	CPP/main.cpp	/^void LinkedList::Display()$/;"	f	class:LinkedList	typeref:typename:void
Display	Circular_LL/main.c	/^void Display(struct Node *h){$/;"	f	typeref:typename:void
Display	Doubly-LL/main.c	/^void Display(struct Node *p){$/;"	f	typeref:typename:void
Display	main.c	/^void Display(struct Node *p){$/;"	f	typeref:typename:void
DisplayRecursive	main.c	/^void DisplayRecursive(struct Node *p){$/;"	f	typeref:typename:void
Head	Circular_LL/main.c	/^}*Head;$/;"	v	typeref:struct:Node *
Insert	CPP/main.cpp	/^void LinkedList::Insert(int index,int x)$/;"	f	class:LinkedList	typeref:typename:void
Insert	Circular_LL/main.c	/^void Insert(struct Node *p, int pos, int x){$/;"	f	typeref:typename:void
Insert	Doubly-LL/main.c	/^void Insert(struct Node *p, int index, int val){$/;"	f	typeref:typename:void
Insert	main.c	/^void Insert(struct Node *p, int index, int x){$/;"	f	typeref:typename:void
InsertinSortedPosition	main.c	/^void InsertinSortedPosition(struct Node *p,int x){$/;"	f	typeref:typename:void
LL_APP_H	ll_apps.h	/^#define LL_APP_H$/;"	d
Length	CPP/main.cpp	/^int LinkedList::Length()$/;"	f	class:LinkedList	typeref:typename:int
Length	Circular_LL/main.c	/^int Length(struct Node *p){$/;"	f	typeref:typename:int
Length	Doubly-LL/main.c	/^int Length(struct Node *p){$/;"	f	typeref:typename:int
LinkedList	CPP/main.cpp	/^    LinkedList(){first=NULL;}$/;"	f	class:LinkedList	file:
LinkedList	CPP/main.cpp	/^LinkedList::LinkedList(int A[],int n)$/;"	f	class:LinkedList
LinkedList	CPP/main.cpp	/^class LinkedList$/;"	c	file:
MAIN_H	main.h	/^#define MAIN_H$/;"	d
Max	main.c	/^int Max(struct Node *p){$/;"	f	typeref:typename:int
Merge	ll_apps.c	/^void Merge(struct Node *p, struct Node *q){$/;"	f	typeref:typename:void
Node	CPP/main.cpp	/^class Node$/;"	c	file:
Node	Circular_LL/main.c	/^struct Node{$/;"	s	file:
Node	Doubly-LL/main.c	/^struct Node{$/;"	s	file:
Node	main.h	/^struct Node$/;"	s
OBJ	Makefile	/^OBJ = main.o ll_apps.o stack.o$/;"	m
RDisplay	Circular_LL/main.c	/^void RDisplay(struct Node *h){$/;"	f	typeref:typename:void
RemoveDuplicate	ll_apps.c	/^void RemoveDuplicate(struct Node *p){$/;"	f	typeref:typename:void
Reverse	Doubly-LL/main.c	/^void Reverse(struct Node *p){$/;"	f	typeref:typename:void
Reverse1	ll_apps.c	/^void Reverse1(struct Node*p){$/;"	f	typeref:typename:void
Reverse_2	ll_apps.c	/^void Reverse_2(struct Node *p){$/;"	f	typeref:typename:void
Reverse_3	ll_apps.c	/^void Reverse_3(struct Node *q, struct Node *p){$/;"	f	typeref:typename:void
Search	main.c	/^int Search(struct Node *p, int key){$/;"	f	typeref:typename:int
SearchTransposition	main.c	/^struct Node* SearchTransposition(struct Node *p, int key){$/;"	f	typeref:struct:Node *
Sum	main.c	/^int Sum(struct Node *p){$/;"	f	typeref:typename:int
clean	Makefile	/^clean:$/;"	t
count	main.c	/^int count(struct Node *p){$/;"	f	typeref:typename:int
create	Circular_LL/main.c	/^void create(int A[],int n){$/;"	f	typeref:typename:void
create	Doubly-LL/main.c	/^void create(int A[], int n){$/;"	f	typeref:typename:void
create	main.c	/^void create(int A[], int n){$/;"	f	typeref:typename:void
create2	main.c	/^void create2(int A[], int n){$/;"	f	typeref:typename:void
data	CPP/main.cpp	/^    int data;$/;"	m	class:Node	typeref:typename:int	file:
data	Circular_LL/main.c	/^    int data;           $/;"	m	struct:Node	typeref:typename:int	file:
data	Doubly-LL/main.c	/^    int data;$/;"	m	struct:Node	typeref:typename:int	file:
data	main.h	/^    int data;$/;"	m	struct:Node	typeref:typename:int
first	CPP/main.cpp	/^    Node *first;$/;"	m	class:LinkedList	typeref:typename:Node *	file:
first	Doubly-LL/main.c	/^}*first = NULL;$/;"	v	typeref:struct:Node *
first	main.h	/^}*first,*head,*tail,*second;$/;"	v	typeref:struct:Node *
head	main.h	/^}*first,*head,*tail,*second;$/;"	v	typeref:struct:Node **
isLoop	ll_apps.c	/^bool isLoop(struct Node* f){$/;"	f	typeref:typename:bool
main	CPP/main.cpp	/^int main()$/;"	f	typeref:typename:int
main	Circular_LL/main.c	/^int main (){$/;"	f	typeref:typename:int
main	Doubly-LL/main.c	/^int main(){$/;"	f	typeref:typename:int
main	main.c	/^int main(void){$/;"	f	typeref:typename:int
next	CPP/main.cpp	/^    Node *next;$/;"	m	class:Node	typeref:typename:Node *	file:
next	Circular_LL/main.c	/^    struct Node *next;$/;"	m	struct:Node	typeref:struct:Node *	file:
next	Doubly-LL/main.c	/^    struct Node *next;$/;"	m	struct:Node	typeref:struct:Node *	file:
next	main.h	/^    struct Node* next;$/;"	m	struct:Node	typeref:struct:Node *
pop	stack.c	/^int pop(struct Node* p){$/;"	f	typeref:typename:int
prev	Doubly-LL/main.c	/^    struct Node *prev;$/;"	m	struct:Node	typeref:struct:Node *	file:
program	Makefile	/^program: $(OBJ)$/;"	t
push	stack.c	/^void push(struct Node *p, int x){$/;"	f	typeref:typename:void
second	main.h	/^}*first,*head,*tail,*second;$/;"	v	typeref:struct:Node ****
tail	main.h	/^}*first,*head,*tail,*second;$/;"	v	typeref:struct:Node ***
third	ll_apps.h	/^struct Node *third;$/;"	v	typeref:struct:Node *
~LinkedList	CPP/main.cpp	/^LinkedList::~LinkedList()$/;"	f	class:LinkedList
